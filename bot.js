require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const config = require("./bot-config");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
	polling: true,
});

const messagesStore = new Map();

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.setMyCommands(config.commands);

const awaitingQuestion = new Map();
const pendingReplies = new Map();

// Texts
const FAQ_text = `
*‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

*–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É?*
‚îî –ó–∞–ø–∏—Å—å –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ call-—Ü–µ–Ω—Ç—Ä: +7(301)237-99-38

*–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—É?*
‚îî –ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7(301)237-99-38

*–ù—É–∂–Ω–æ –ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –æ—Å–º–æ—Ç—Ä–∞?*
‚îî –î–∞, –Ω—É–∂–Ω–æ

*–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –§–õ–ì?*
‚îî –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –§–õ–ì –≥–æ—Ç–æ–≤—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –§–õ–ì

*–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞?*
‚îî –ö–∞—Ç–µ–≥–æ—Ä–∏—è –í - 915 —Ä—É–±–ª–µ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –° - 1130 —Ä—É–±–ª–µ–π

*–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞–º–º–æ–≥—Ä–∞—Ñ–∏—è –Ω—É–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?*
‚îî –î–∞

*–ö–∞–∫ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ?*
‚îî +7(301)237-99-63, –¥–æ–± 106

*–ö–∞–∫ —É–∑–Ω–∞—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ª—å–≥–æ—Ç–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞?*
‚îî –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/petrcrb  –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –ó–¥–æ—Ä–æ–≤—å–µ –î–∂–∏–¥—ã –≤ —Ç–µ–º–µ "–ê–ø—Ç–µ–∫–∞ –ì–ë–£–ó –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –¶–†–ë" –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º—Å—è –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ

*–í –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø  –≤–∑—Ä–æ—Å–ª–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è?*
‚îî –í –ª—é–±–æ–π –¥–µ–Ω—å, –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏
`;

const schedule_text = `
*üïí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã*

*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è :* –ü–Ω-–ü—Ç: 08:00 - 17:00

*–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä :* –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

*–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ :* –ü–Ω-–ü—Ç: 08:00 - 16:12

*–†–µ–Ω—Ç–≥–µ–Ω –∫–∞–±–∏–Ω–µ—Ç :* 08:00-15:00

*–ö–∞—Å—Å–∞ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥ :* 
–ü–Ω: 08:00-12:00 
–°—Ä: 08:00-12:00, 13:00-16:00 
–ü—Ç: 08:00-12:00 
–í—Ç, –ß—Ç: –∫–∞—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

*–ü—Ä–∏—ë–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ :* 
–ü–Ω-–ü—Ç: 08:00 - 10:00, –≤—ã–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å 15:00

*–†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏ :* 
–ü–Ω-–ü—Ç: 08:00 - 16:12 
–¢–µ–ª: +7-301-237-11-26



*–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é –≥—Ä–∞–∂–¥–∞–Ω :* 
–¢–µ–ª: +7-301-243-50-38

*–ü—Ä–∏—ë–º–Ω–∞—è –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–∞—á–∞ :* 
–¢–µ–ª: +7(3012)37-99-63
`;

// Clear chat function
async function clearChat(chatID) {
	const allBotMessages = messagesStore.get(chatID) || [];
	messagesStore.delete(chatID);

	for (const messageID of allBotMessages) {
		try {
			await bot.deleteMessage(chatID, messageID);
		} catch (error) {
			console.error(`Couldn't delete message ${messageID}:`, error);
		}
	}
}

// –°–æ–æ–±—â–µ–Ω–∏—è
async function sendUnknownCommand(chatID) {
	return await bot.sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
}

async function sendFAQ(chatID) {
	return await bot.sendMessage(chatID, FAQ_text, {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
						callback_data: "question",
					},
				],
				...config.mainMenu.backButton.reply_markup.inline_keyboard,
			],
		},
	});
}

async function sendSchedule(chatID) {
	return await bot.sendMessage(chatID, schedule_text, {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: config.mainMenu.backButton.reply_markup,
	});
}

async function sendMainMenu(chatID) {
	const sent = await bot.sendMessage(
		chatID,
		`–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
		config.mainMenu.inlineButtons
	);

	const IDs = messagesStore.get(chatID) || [];
	messagesStore.set(chatID, [...IDs, sent.message_id]);
}

async function confirmQuestion(chatID) {
	await bot.sendMessage(
		chatID,
		"–í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
		config.confirmQuestion
	);
}

async function forwardQuestion(chatID) {
	await bot.sendMessage(chatID, "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω");
}

// Receive message
bot.on("message", async (msg) => {
	const nameOfUser = msg.chat.first_name;
	const chatID = msg.chat.id;
	const messageText = msg?.text;

	console.log(msg);

	const senderID = msg.chat.id;
	const text = msg.text;

	// Is this operator replying to someone?
	if (pendingReplies.has(senderID)) {
		const targetUserID = pendingReplies.get(senderID);
		pendingReplies.delete(senderID); // clear after one reply

		await bot.sendMessage(targetUserID, `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n${text}`);
		await bot.sendMessage(senderID, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
		return;
	}

	// Awaiting question
	if (awaitingQuestion.has(chatID)) {
		awaitingQuestion.delete(chatID); // remove them from awaiting list

		// Forward to operator
		const operatorsChatIDs = config.operatorsIDs;
		operatorsChatIDs.forEach(async (id) => {
			await bot.sendMessage(
				id,
				`üì© –í–æ–ø—Ä–æ—Å –æ—Ç ${nameOfUser} (@${
					msg.chat.username || "–Ω–µ—Ç username"
				}):\n\n${messageText}`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
									callback_data: `replyTo_${chatID}`, // contains the user‚Äôs ID
								},
							],
						],
					},
				}
			);
		});

		await bot.sendMessage(
			chatID,
			"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ!"
		);
		await sendMainMenu(chatID);
		return;
	}

	if (messageText.toLowerCase() == "/start") {
		clearChat(chatID);

		await bot.sendMessage(
			chatID,
			`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${nameOfUser} \n \n–≠—Ç–æ –±–æ—Ç –¶–†–ë`
		);

		await sendMainMenu(chatID);
	} else if (messageText.toLowerCase() == "/faq") {
		sendFAQ(chatID);
	} else if (messageText.toLowerCase() == "/schedule") {
		sendSchedule(chatID);
	} else {
		sendUnknownCommand(chatID);
	}
});

// Callback query
bot.on("callback_query", async (msg) => {
	const chatID = msg.message.chat.id;
	const messageID = msg.message.message_id;
	const data = msg.data;

	console.log(msg);

	try {
		await bot.deleteMessage(chatID, messageID);
	} catch (error) {
		console.error("Failed to delete previous menu message:", error);
	}

	if (data == "schedule") {
		await sendSchedule(chatID);
	}
	if (data == "faq") {
		await sendFAQ(chatID);
	}
	if (data == "main") {
		await sendMainMenu(chatID);
	}

	// Question
	if (data == "question") {
		await confirmQuestion(chatID);
	}
	if (data == "question_cancel") {
		await bot.sendMessage(chatID, "–û—Ç–º–µ–Ω–∞");
		await sendMainMenu(chatID);
	}
	if (data == "question_yes") {
		await bot.sendMessage(
			chatID,
			"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º."
		);
		awaitingQuestion.set(chatID, true);
	}
});

bot.on("callback_query", async (query) => {
	const data = query.data;
	const operatorID = query.from.id;

	if (data.startsWith("replyTo_")) {
		const userChatID = data.split("_")[1];

		// Save that operator is now replying to this user
		pendingReplies.set(operatorID, userChatID);

		await bot.sendMessage(operatorID, `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`);
		await bot.answerCallbackQuery(query.id);
	}
});

console.log("The bot started successfully");
